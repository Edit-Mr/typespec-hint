/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/auth/login/oauth/{provider}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Auth_loginGoogle"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/refresh/{refreshToken}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Auth_refreshToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all existing forms. */
    get: operations["Forms_listForms"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forms/recipients/preview": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Preview recipients by orgIds/unitIds (no duplicated). */
    post: operations["Forms_previewRecipients"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forms/{formId}/questions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all the questions of a specific form. */
    get: operations["Forms_listQuestions"];
    put?: never;
    /** @description Create a new question for a specific form. */
    post: operations["Forms_createQuestion"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forms/{formId}/questions/{questionId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get all answers for a specific question across all form responses. */
    get: operations["Responses_getQuestionAnswers"];
    /** @description Update an existing question by its unique identifier. */
    put: operations["Forms_updateQuestion"];
    post?: never;
    /** @description Delete an existing question by its unique identifier. */
    delete: operations["Forms_deleteQuestion"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forms/{formId}/responses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all responses for a specific form. */
    get: operations["Responses_listFormResponses"];
    put?: never;
    /** @description Submit a new response to a form. */
    post: operations["Responses_submitFormResponse"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forms/{formId}/responses/{responseId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get a specific response by ID. */
    get: operations["Responses_getFormResponse"];
    put?: never;
    post?: never;
    /** @description Delete a response and all its associated data. */
    delete: operations["Responses_deleteFormResponse"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forms/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get a specific form by its unique identifier. */
    get: operations["Forms_getFormById"];
    /** @description Update an existing form by its unique identifier. */
    put: operations["Forms_updateForm"];
    post?: never;
    /** @description Delete an existing form by its unique identifier. */
    delete: operations["Forms_deleteForm"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/forms/{id}/publish": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Publish a form. Set status to 'published', compute recipients, update inbox threads. */
    post: operations["Forms_publishForm"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/healthz": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Healthz_checkHealthz"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/inbox": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get all the preview of the inbox messages with pagination. */
    get: operations["Inbox_getInboxMessages"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/inbox/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get the user inbox message by its unique identifier. */
    get: operations["Inbox_getInboxMessage"];
    /** @description Update flags for the user inbox message. */
    put: operations["Inbox_updateInboxMessageFlag"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get all organizations */
    get: operations["Unit_getAllOrganizations"];
    put?: never;
    /** @description Create a new organization */
    post: operations["Unit_createOrg"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Create a new parent-child relationship between units by linking them */
    post: operations["Unit_addParentChild"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/relations/child-id/{child_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** @description Remove a parent-child relationship between units by unlinking them */
    delete: operations["Unit_removeParentChild"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get a specific unit with the slug of its organization by its unique identifier */
    get: operations["Unit_getOrgById"];
    /** @description Update an existing unit or organization by its unique identifier */
    put: operations["Unit_updateOrg"];
    post?: never;
    /** @description Delete a specific organization by its unique identifier */
    delete: operations["Unit_deleteOrg"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List the complete usage history of a given slug */
    get: operations["Slug_getSlugHistory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all members of an organization */
    get: operations["Unit_listOrgMembers"];
    put?: never;
    /** @description Add a member to an organization */
    post: operations["Unit_addOrgMember"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/members/{member_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** @description Remove an organization-member relationship */
    delete: operations["Unit_removeOrgMember"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get the availability of the slug. */
    get: operations["Slug_getSlugStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/unit-ids": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all unit IDs, optionally filtered by parent organization ID */
    get: operations["Unit_listOrgSubUnitIds"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/units": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all units, optionally filtered by parent organization ID */
    get: operations["Unit_listOrgSubUnits"];
    put?: never;
    /** @description Create a new unit */
    post: operations["Unit_createUnit"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/units/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get a specific unit with the slug of its organization by its unique identifier */
    get: operations["Unit_getUnitById"];
    /** @description Update an existing unit or organization by its unique identifier */
    put: operations["Unit_updateUnit"];
    post?: never;
    /** @description Delete a specific unit of an organization by its unique identifier */
    delete: operations["Unit_deleteUnit"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/units/{id}/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all members of a specific unit */
    get: operations["Unit_listUnitMembers"];
    put?: never;
    /** @description Add a member to an unit */
    post: operations["Unit_addUnitMember"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/units/{id}/members/{member_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** @description Remove an unit-member relationship */
    delete: operations["Unit_removeUnitMember"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/units/{id}/subunit-ids": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all unit IDs, optionally filtered by parent unit ID */
    get: operations["Unit_listUnitSubUnitIds"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/units/{id}/subunits": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List all units, optionally filtered by parent unit ID */
    get: operations["Unit_listUnitSubUnits"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orgs/{slug}/units/{unitId}/forms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List forms under a specific unit. */
    get: operations["Unit_listFormsByUnit"];
    put?: never;
    /** @description Create a new form under a unit. */
    post: operations["Unit_createUnitForm"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get the current user's information. */
    get: operations["User_getMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @enum {string} */
    "Auth.OAuthProviders": "google";
    "Auth.RefreshToken": {
      /** @description The access token and formatted as JWT */
      accessToken: string;
      /** @description The expiration date of the refresh token. */
      expirationTime: number;
      /** @description The new refresh token. */
      refreshToken: string;
    };
    /** @description A choice with ID and name for choice-based questions. */
    "Forms.Choice": {
      /** @description The unique identifier of the choice. */
      id: components["schemas"]["uuid"];
      /** @description The name/text of the choice. */
      name: string;
    };
    /** @description A choice option for creating/updating choice-based questions. */
    "Forms.ChoiceOption": {
      /** @description The name/text of the choice option. */
      name: string;
    };
    /** @description The structure of a form. */
    "Forms.Form": {
      /** @description The form's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The title of the form. */
      title: string;
      /** @description The description written in the form to show user info. */
      description: string;
      /** @description Preview text. If not provided, fallback to first 25 characters of description. */
      previewMessage: string;
      /** @description The status of this form. */
      status: components["schemas"]["Forms.FormStatus"];
      /** @description The unit this form belongs to. */
      unitId: components["schemas"]["uuid"];
      /** @description The user who last editted the form. */
      lastEditor: components["schemas"]["uuid"];
      /**
       * Format: date-time
       * @description (Optional) Deadline for form completion. If not specified, returns null.
       */
      deadline?: string;
      /**
       * Format: date-time
       * @description The creation timestamp of the form.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the form
       */
      updatedAt: string;
    };
    /**
     * @description The request body for creating/updating a form.
     * @example {
     *       "title": "Enter SDC Form",
     *       "description": "If you want to join us, just fill in this form!"
     *     }
     */
    "Forms.FormRequest": {
      /** @description The title of the form. */
      title: string;
      /** @description The description of the form. */
      description: string;
      /** @description (Optional) Preview text for the form. If not provided, fallback to first 25 characters of description. */
      previewMessage?: string;
      /**
       * Format: date-time
       * @description (Optional) Deadline for form completion.
       */
      deadline?: string;
    };
    /**
     * @description The current status of form
     * @enum {string}
     */
    "Forms.FormStatus": "draft" | "published";
    /** @description The structure of a question. */
    "Forms.Question": {
      /** @description The question's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The form's id that the question belongs to.  */
      formId: components["schemas"]["uuid"];
      /** @description Whether the question is required to answer or not. */
      required: boolean;
      /** @description The type of the question. */
      type: components["schemas"]["Forms.QuestionTypes"];
      /** @description What is the question. */
      title: string;
      /** @description More details of this question. */
      description: string;
      /**
       * Format: int32
       * @description What is the number of this question in the form.
       */
      order: number;
      /** @description Available choices for single_choice and multiple_choice questions. */
      choices?: components["schemas"]["Forms.Choice"][];
      /**
       * Format: date-time
       * @description The creation timestamp of the question.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The updated timestamp of the question.
       */
      updatedAt: string;
    };
    /**
     * @description The request body for creating/updating a question.
     * @example {
     *       "required": true,
     *       "type": "multiple_choice",
     *       "title": "Which team you want to join???",
     *       "description": "Pick one of your favorite!!!",
     *       "order": 2,
     *       "choices": [
     *         {
     *           "name": "Core System Team"
     *         },
     *         {
     *           "name": "Clustron Team"
     *         },
     *         {
     *           "name": "HPC Team"
     *         }
     *       ]
     *     }
     * @example {
     *       "required": true,
     *       "type": "short_text",
     *       "title": "What's your name?",
     *       "description": "Please enter your name",
     *       "order": 2
     *     }
     */
    "Forms.QuestionRequest": {
      /** @description Whether the question is required to answer or not. */
      required: boolean;
      /** @description The type of the question. */
      type: components["schemas"]["Forms.QuestionTypes"];
      /** @description What is the question. */
      title: string;
      /** @description More details of this question. */
      description: string;
      /**
       * Format: int32
       * @description What is the number of this question in the form.
       */
      order: number;
      /** @description Available choice options for single_choice and multiple_choice questions. */
      choices?: components["schemas"]["Forms.ChoiceOption"][];
    };
    /**
     * @description The current types of question
     * @enum {string}
     */
    "Forms.QuestionTypes":
      | "short_text"
      | "long_text"
      | "single_choice"
      | "multiple_choice"
      | "date";
    /**
     * @description Select recipients by organizations and/or units.(remove duplicates).
     * @example {
     *       "unitIds": [
     *         "9a843aa0-8451-4e3b-b6a0-8c0e994e9040"
     *       ]
     *     }
     */
    "Forms.RecipientSelectionRequest": {
      /** @description Target organization ID to collect users from. */
      orgId?: components["schemas"]["uuid"];
      /** @description Target unit IDs to collect users from. */
      unitIds?: components["schemas"]["uuid"][];
    };
    /** @description The result of recipients selection (no duplicated). */
    "Forms.RecipientSelectionResponse": {
      recipients: components["schemas"]["Forms.RecipientUser"][];
    };
    /** @description The basic info of a user that can receive the form. */
    "Forms.RecipientUser": {
      id: components["schemas"]["uuid"];
      name: string;
    };
    /** @description The structure of a full inbox message. */
    "Inbox.InboxFormMessage": {
      /** @description The unique identifier of an inbox message. */
      id: components["schemas"]["uuid"];
      /** @description The sender's unitId. If not specified, defaults to the uuid referring to a unit with the organization's name. */
      postedBy: components["schemas"]["uuid"];
      /** @description The title of the inbox message. */
      title: string;
      /** @description The organization display name of the sender. */
      org: string;
      /** @description The unit display name of the sender. */
      unit: string;
      /**
       * @description The type of the content.
       * @enum {string}
       */
      type: "text" | "form";
      /** @description Preview text. For forms: uses form.previewMessage if set, otherwise first 25 chars of form.description. For text: uses provided preview message if set, otherwise first 25 chars of content. */
      previewMessage: string;
      /** @description The identifier of the content referenced by the contentType. */
      contentId: components["schemas"]["uuid"];
      /**
       * Format: date-time
       * @description The create timestamp of the inbox message.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the inbox message.
       */
      updatedAt: string;
    };
    /** @description The structure of a user inbox message. */
    "Inbox.UserInboxMessage": {
      /** @description The id of this UserInboxMessage. */
      id: components["schemas"]["uuid"];
      /** @description The inbox message this user inbox message refers to. */
      message: components["schemas"]["Inbox.InboxFormMessage"];
      /**
       * @description Indicates whether the user has read the inbox message.
       * @default false
       */
      isRead: boolean;
      /**
       * @description User can mark the inbox message as starred.
       * @default false
       */
      isStarred: boolean;
      /**
       * @description User can archive the inbox message and hide it from the inbox view.
       * @default false
       */
      isArchived: boolean;
    };
    /** @description The deatil structure of a user inbox message with content. */
    "Inbox.UserInboxMessageDetail": {
      /** @description The id of this UserInboxMessage. */
      id: components["schemas"]["uuid"];
      /** @description The inbox message this user inbox message refers to. */
      message: components["schemas"]["Inbox.InboxFormMessage"];
      /** @description The full content of inbox_message. */
      content?: components["schemas"]["Forms.Form"];
      /**
       * @description Indicates whether the user has read the inbox message.
       * @default false
       */
      isRead: boolean;
      /**
       * @description User can mark the inbox message as starred.
       * @default false
       */
      isStarred: boolean;
      /**
       * @description User can archive the inbox message and hide it from the inbox view.
       * @default false
       */
      isArchived: boolean;
    };
    /** @description The filters that can be applied by the user for their inbox messages. */
    "Inbox.UserInboxMessageFilters": {
      /**
       * @description Indicates whether the user has read the inbox message.
       * @default false
       */
      isRead: boolean;
      /**
       * @description User can mark the inbox message as starred.
       * @default false
       */
      isStarred: boolean;
      /**
       * @description User can archive the inbox message and hide it from the inbox view.
       * @default false
       */
      isArchived: boolean;
    };
    NotFound: {
      /** @enum {string} */
      title: "Not Found";
      /** @enum {number} */
      status: 404;
      /** @enum {string} */
      type: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404";
      detail: string;
    };
    /** @description Problem represents a problem detail as defined in RFC 7807 */
    ProblemDetail: {
      /** @description The problem's title. */
      title: string;
      /** @description The problem's status code. */
      status: number;
      /** @description Type indicates the URI that identifies the problem type, we use an MDN URI here. */
      type: string;
      /** @description The problem's detail. */
      detail: string;
    };
    /** @description Response model for a single answer in question answers view */
    "Responses.AnswerForQuestionResponse": {
      /** @description The answer's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The response this answer belongs to. */
      responseId: components["schemas"]["uuid"];
      /** @description The user who submitted this answer. */
      submittedBy: components["schemas"]["uuid"];
      /** @description The answer value. */
      value: string;
      /**
       * Format: date-time
       * @description The creation timestamp of the answer.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the answer.
       */
      updatedAt: string;
    };
    /**
     * @description Request model for submitting an individual answer
     * @example {
     *       "questionId": "2b2bc4f4-71c1-478b-9e36-516eac6b36c3",
     *       "value": "f421cfc2-2b84-4da9-9629-011af609935a;2ca86a6d-7735-4f17-8676-29b4724b524f"
     *     }
     * @example {
     *       "questionId": "ee894524-4bd8-4a64-8fd2-a53b39ca94cd",
     *       "value": "John Doe"
     *     }
     */
    "Responses.AnswerRequest": {
      /** @description The question being answered. */
      questionId: components["schemas"]["uuid"];
      /** @description The answer value (format depends on questionType from questionId). */
      value: string;
    };
    /** @description Response model for getting all answers for a specific question */
    "Responses.AnswersForQuestionResponse": {
      /** @description The question details. */
      question: components["schemas"]["Forms.Question"];
      /** @description All answers for this question. */
      answers: components["schemas"]["Responses.AnswerForQuestionResponse"][];
    };
    /** @description Response model for getting a specific form response */
    "Responses.GetResponse": {
      /** @description The response's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The form that this response belongs to. */
      formId: components["schemas"]["uuid"];
      /** @description The user who submitted this response. */
      submittedBy: components["schemas"]["uuid"];
      /** @description All questions with their answers for this response. */
      questionAnswerPairs: components["schemas"]["Responses.QuestionAnswerForGetResponse"][];
      /**
       * Format: date-time
       * @description The creation timestamp of the response.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the response.
       */
      updatedAt: string;
    };
    /** @description Response model for listing all responses of a form */
    "Responses.ListResponse": {
      /** @description The form ID. */
      formId: components["schemas"]["uuid"];
      /** @description All responses for this form. */
      responses: components["schemas"]["Responses.ResponseJSON"][];
    };
    /** @description Response model for a question with its answer */
    "Responses.QuestionAnswerForGetResponse": {
      /** @description The question details. */
      questionId: components["schemas"]["uuid"];
      /** @description The answer value. */
      answer: string;
    };
    /** @description Response model for a single response in list view */
    "Responses.ResponseJSON": {
      /** @description The response's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The user who submitted this response. */
      submittedBy: components["schemas"]["uuid"];
      /**
       * Format: date-time
       * @description The creation timestamp of the response.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the response.
       */
      updatedAt: string;
    };
    /**
     * @description Request model for submitting a complete form response
     * @example {
     *       "answers": [
     *         {
     *           "questionId": "ee894524-4bd8-4a64-8fd2-a53b39ca94cd",
     *           "value": "John Doe"
     *         },
     *         {
     *           "questionId": "2b2bc4f4-71c1-478b-9e36-516eac6b36c3",
     *           "value": "f421cfc2-2b84-4da9-9629-011af609935a;2ca86a6d-7735-4f17-8676-29b4724b524f"
     *         }
     *       ]
     *     }
     */
    "Responses.SubmitRequest": {
      /** @description All answers for this form submission. */
      answers: components["schemas"]["Responses.AnswerRequest"][];
    };
    /** @description Response model for a submitted form response */
    "Responses.SubmitResponse": {
      /** @description The response's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The form that this response belongs to. */
      formId: components["schemas"]["uuid"];
      /**
       * Format: date-time
       * @description The creation timestamp of the response.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the response.
       */
      updatedAt: string;
    };
    /** @description The usage history of the slug. */
    "Slug.History": {
      /** @description The unique identifier of the organization that used the slug. */
      orgId: components["schemas"]["uuid"];
      /** @description The name of the organization that used the slug. */
      orgName: string;
      /**
       * Format: date-time
       * @description The timestamp when the organization started using the slug.
       */
      startedAt: string;
      /** @description The timestamp when the organization stopped using the slug, if applicable. */
      endedAt: string | null;
    };
    /** @description The current state of the slug. */
    "Slug.Status": {
      /** @description Indicates whether the slug is available. */
      available: boolean;
      /** @description The organization currently using the slug, if any. */
      orgId: components["schemas"]["uuid"] | null;
    };
    Unauthorized: {
      /** @enum {string} */
      title: "Unauthorized";
      /** @enum {number} */
      status: 401;
      /** @enum {string} */
      type: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401";
      detail: string;
    };
    /** @description Base model, containing common fields for both units and organizations. */
    "Unit.Base": {
      /** @description The unit's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The name of the unit or organization */
      name: string;
      /** @description A brief description of the unit or organization */
      description: string;
      /** @description Metadata for the unit or organization, can include additional information like contact details, address, etc. */
      metadata: Record<string, never>;
      /**
       * Format: date-time
       * @description The creation timestamp of the unit or organization
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the unit or organization
       */
      updatedAt: string;
    };
    /**
     * @description Base Request model, containing common fields for updating units and organizations.
     * @example {
     *       "name": "2025 Backend",
     *       "description": "Backend course - Updated",
     *       "metadata": {
     *         "year": "2025",
     *         "type": "education program"
     *       }
     *     }
     */
    "Unit.BaseRequest": {
      /** @description The name of the unit or organization */
      name: string;
      /** @description A brief description of the unit or organization */
      description: string;
      /** @description Metadata for the unit or organization, can include additional information like contact details, address, etc. */
      metadata: Record<string, never>;
    };
    /** @example {
     *       "name": "NYCU SDC2",
     *       "description": "陽明交大軟體開發社",
     *       "slug": "nycu-sdc1",
     *       "metadata": {
     *         "type": "club"
     *       }
     *     } */
    "Unit.CreateOrgRequest": {
      /** @description The name of the unit or organization */
      name: string;
      /** @description A brief description of the unit or organization */
      description: string;
      /** @description Metadata for the unit or organization, can include additional information like contact details, address, etc. */
      metadata: Record<string, never>;
      slug: string;
    };
    /** @example {
     *       "name": "2025 Backend",
     *       "description": "Backend course",
     *       "metadata": {
     *         "year": "2025",
     *         "type": "education program"
     *       }
     *     } */
    "Unit.CreateUnitRequest": {
      /** @description The name of the unit or organization */
      name: string;
      /** @description A brief description of the unit or organization */
      description: string;
      /** @description Metadata for the unit or organization, can include additional information like contact details, address, etc. */
      metadata: Record<string, never>;
    };
    /** @description Model representing a member of an organization, linking organization and member by their unique identifiers */
    "Unit.OrgMember": {
      /** @description The unique identifier of the organization */
      orgId: components["schemas"]["uuid"];
      /** @description The unique identifier of the member */
      memberId: components["schemas"]["uuid"];
    };
    /** @example {
     *       "email": "123@gmail.com"
     *     } */
    "Unit.OrgMemberRequest": {
      email: string;
    };
    "Unit.Organization": {
      /** @description The unit's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The name of the unit or organization */
      name: string;
      /** @description A brief description of the unit or organization */
      description: string;
      /** @description Metadata for the unit or organization, can include additional information like contact details, address, etc. */
      metadata: Record<string, never>;
      /**
       * Format: date-time
       * @description The creation timestamp of the unit or organization
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the unit or organization
       */
      updatedAt: string;
      /** @description Unique slug for the organization, used for URL routing and identification */
      slug: string;
    };
    /** @description Model representing a parent-child relationship between units, allowing for hierarchical structures */
    "Unit.ParentChild": {
      /** @description The unique identifier of the parent unit, which can be left null if the child is root unit of the organization. */
      parentId?: components["schemas"]["uuid"];
      /** @description The unique identifier of the child unit */
      childId: components["schemas"]["uuid"];
      /** @description The unique identifier of the units' organization */
      orgId: components["schemas"]["uuid"];
    };
    /** @example {
     *       "parentId": "3c5fa073-7b97-43a3-bc44-ddc98f390a08",
     *       "childId": "d26e9c90-4747-496b-9953-7e7c4f97643f",
     *       "orgId": "3c5fa073-7b97-43a3-bc44-ddc98f390a08"
     *     } */
    "Unit.ParentChildRequest": {
      parentId?: components["schemas"]["uuid"];
      childId: components["schemas"]["uuid"];
      orgId: components["schemas"]["uuid"];
    };
    "Unit.Unit": {
      /** @description The unit's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The name of the unit or organization */
      name: string;
      /** @description A brief description of the unit or organization */
      description: string;
      /** @description Metadata for the unit or organization, can include additional information like contact details, address, etc. */
      metadata: Record<string, never>;
      /**
       * Format: date-time
       * @description The creation timestamp of the unit or organization
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The last updated timestamp of the unit or organization
       */
      updatedAt: string;
    };
    /** @description Model representing a member of a unit, linking unit and member by their unique identifiers */
    "Unit.UnitMember": {
      /** @description The unique identifier of the unit */
      unitId: components["schemas"]["uuid"];
      /** @description The unique identifier of the member */
      memberId: components["schemas"]["uuid"];
    };
    /** @example {
     *       "email": "123@gmail.com"
     *     } */
    "Unit.UnitMemberRequest": {
      email: string;
    };
    "Unit.UpdateOrgRequest": {
      /** @description The name of the unit or organization */
      name: string;
      /** @description A brief description of the unit or organization */
      description: string;
      /** @description Metadata for the unit or organization, can include additional information like contact details, address, etc. */
      metadata: Record<string, never>;
      slug: string;
    };
    "Unit.UpdateUnitRequest": {
      /** @description The name of the unit or organization */
      name: string;
      /** @description A brief description of the unit or organization */
      description: string;
      /** @description Metadata for the unit or organization, can include additional information like contact details, address, etc. */
      metadata: Record<string, never>;
    };
    /** @enum {string} */
    "User.Role": "user";
    "User.User": {
      /** @description The user's unique identifier. */
      id: components["schemas"]["uuid"];
      /** @description The user's username, can change, but must be unique across the system. */
      username: string;
      /** @description The user's name, usually the first and last name. */
      name: string;
      /** @description Avatar URL of the user. */
      avatarUrl: string;
      /** @description Global role of the user. */
      roles: components["schemas"]["User.Role"][];
    };
    /** @enum {string} */
    Versions: "1.0.0";
    /** Format: uuid */
    uuid: string;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  Auth_loginGoogle: {
    parameters: {
      query: {
        /** @description The callback URL of the OAuth2 login. [See details](https://clustron.atlassian.net/wiki/spaces/CS/pages/41320449/Authentication+Process) */
        c: string;
        /** @description The redirect URL for login callback. */
        r?: string;
      };
      header?: never;
      path: {
        /** @description The OAuth2 provider to use for login. */
        provider: components["schemas"]["Auth.OAuthProviders"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirection */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  Auth_refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The refresh token to use for refreshing the access token. */
        refreshToken: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Auth.RefreshToken"];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  Forms_listForms: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.Form"][];
        };
      };
    };
  };
  Forms_previewRecipients: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Forms.RecipientSelectionRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.RecipientSelectionResponse"];
        };
      };
    };
  };
  Forms_listQuestions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.Question"][];
        };
      };
    };
  };
  Forms_createQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Forms.QuestionRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.Question"];
        };
      };
    };
  };
  Responses_getQuestionAnswers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
        questionId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Responses.AnswersForQuestionResponse"][];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Forms_updateQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
        questionId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Forms.QuestionRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.Question"];
        };
      };
    };
  };
  Forms_deleteQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
        questionId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  Responses_listFormResponses: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Responses.ListResponse"];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Responses_submitFormResponse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Responses.SubmitRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Responses.SubmitResponse"];
        };
      };
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Responses_getFormResponse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
        responseId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Responses.GetResponse"];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Responses_deleteFormResponse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        formId: components["schemas"]["uuid"];
        responseId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Forms_getFormById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.Form"];
        };
      };
    };
  };
  Forms_updateForm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Forms.FormRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.Form"];
        };
      };
    };
  };
  Forms_deleteForm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  Forms_publishForm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Forms.RecipientSelectionRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  Healthz_checkHealthz: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  Inbox_getInboxMessages: {
    parameters: {
      query?: {
        isRead?: boolean;
        isStarred?: boolean;
        isArchived?: boolean;
        search?: string;
        unitIds?: components["schemas"]["uuid"][];
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["Inbox.UserInboxMessage"][];
            /** Format: int32 */
            totalPages: number;
            /** Format: int32 */
            totalItems: number;
            /** Format: int32 */
            currentPage: number;
            /** Format: int32 */
            pageSize: number;
            hasNextPage: boolean;
          };
        };
      };
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unauthorized"];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Inbox_getInboxMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inbox.UserInboxMessageDetail"];
        };
      };
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unauthorized"];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Inbox_updateInboxMessageFlag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @default false */
          isRead?: boolean;
          /** @default false */
          isStarred?: boolean;
          /** @default false */
          isArchived?: boolean;
        };
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inbox.UserInboxMessage"];
        };
      };
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unauthorized"];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Unit_getAllOrganizations: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Organization"][];
        };
      };
    };
  };
  Unit_createOrg: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Unit.CreateOrgRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Organization"];
        };
      };
    };
  };
  Unit_addParentChild: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Unit.ParentChildRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.ParentChild"];
        };
      };
    };
  };
  Unit_removeParentChild: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        child_id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  Unit_getOrgById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Organization"];
        };
      };
    };
  };
  Unit_updateOrg: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Unit.UpdateOrgRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Organization"];
        };
      };
    };
  };
  Unit_deleteOrg: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  Slug_getSlugHistory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            current: components["schemas"]["Slug.Status"];
            history: components["schemas"]["Slug.History"][];
          };
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Unit_listOrgMembers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown[];
        };
      };
    };
  };
  Unit_addOrgMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Unit.OrgMemberRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.OrgMember"];
        };
      };
    };
  };
  Unit_removeOrgMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        member_id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  Slug_getSlugStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Slug.Status"];
        };
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  Unit_listOrgSubUnitIds: {
    parameters: {
      query?: {
        /** @description The parent unit ID used to filter subunits by their parent-child relationship */
        parentId?: components["schemas"]["uuid"];
      };
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["uuid"][];
        };
      };
    };
  };
  Unit_listOrgSubUnits: {
    parameters: {
      query?: {
        /** @description The parent unit ID used to filter subunits by their parent-child relationship */
        parentId?: components["schemas"]["uuid"];
      };
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Unit"][];
        };
      };
    };
  };
  Unit_createUnit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Unit.CreateUnitRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Unit"];
        };
      };
    };
  };
  Unit_getUnitById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Unit"];
        };
      };
    };
  };
  Unit_updateUnit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Unit.UpdateUnitRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Unit"];
        };
      };
    };
  };
  Unit_deleteUnit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  Unit_listUnitMembers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown[];
        };
      };
    };
  };
  Unit_addUnitMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Unit.UnitMemberRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.UnitMember"];
        };
      };
    };
  };
  Unit_removeUnitMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        id: components["schemas"]["uuid"];
        member_id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  Unit_listUnitSubUnitIds: {
    parameters: {
      query?: {
        /** @description The parent unit ID used to filter subunits by their parent-child relationship */
        parentId?: components["schemas"]["uuid"];
      };
      header?: never;
      path: {
        slug: string;
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["uuid"][];
        };
      };
    };
  };
  Unit_listUnitSubUnits: {
    parameters: {
      query?: {
        /** @description The parent unit ID used to filter subunits by their parent-child relationship */
        parentId?: components["schemas"]["uuid"];
      };
      header?: never;
      path: {
        slug: string;
        id: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unit.Unit"][];
        };
      };
    };
  };
  Unit_listFormsByUnit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        unitId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.Form"][];
        };
      };
    };
  };
  Unit_createUnitForm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        unitId: components["schemas"]["uuid"];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Forms.FormRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Forms.Form"];
        };
      };
    };
  };
  User_getMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User.User"];
        };
      };
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Unauthorized"];
        };
      };
    };
  };
}
